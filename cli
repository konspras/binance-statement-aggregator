#!/usr/bin/env python3

__author__ = "konstantinos.prasopoulos@epfl.ch (konstantinos prasopoulos)"

'''
Work in progress
'''

import os
import sys
from pprint import pprint

import util
import trade_processor as tradep
import transaction_processor as transp
import eth_staking_processor as ethstp
from cfg import trcols, tdcols
from model import PortfolioState, Position, GenericEvent


def print_info(res):
    print(f"\n~~~~~~~~~~~~~~~ INFO ~~~~~~~~~~~~~~~")
    for res_key in res:
        print(f"\n\n>>>>>>>> {res_key} <<<<<<<<\n")
        for info_key in res[res_key]:
            print(f">> {info_key}")
            print(res[res_key][info_key])


def create_portfolio_state(flow_events):
    ps = PortfolioState()
    for event in flow_events:
        ps.add_event(event)

    return ps

# TODO: Profit by month in Portfolio state? Or Use a containgg class/code to extract per month
# stats as the data is fed? Maybe the Position can split profits and fees by month and then
# provide methods to get ether monthly or aggregate views... Makes sense.


def main():
    # TODO: CLI args
    datapath = "data"
    transaction_filepath = f"{datapath}/transaction_history.csv"
    # Must be generated by choosing the "Beyond 6 months" option. Otherwise the csv format is
    # not compatible.
    trade_filepath = f"{datapath}/trade_history.csv"
    eth_stake_path = f"{datapath}/Binance ETH Staking - Stake.csv"
    beth_distr_path = f"{datapath}/Binance ETH Staking - Distribution.csv"
    do_print_info = False

    flow_events = []
    info = {}
    trans_fe, info["Transaction History"] = transp.process_transaction_history(
        transaction_filepath)
    trade_fe, info["Trade History"] = tradep.process_trade_history(
        trade_filepath)
    eth_stake_fe = ethstp.process_eth_staking(eth_stake_path, beth_distr_path)

    flow_events += trade_fe
    flow_events += trans_fe
    flow_events += eth_stake_fe
    print(f"Total flow events: {len(flow_events)}")
    util.sort_flow_events(flow_events)
    # print("---------------------------------------------------------------------------")
    ps = create_portfolio_state(flow_events)

    if do_print_info:
        print_info(info)

    # TODO: Must there be a price history?
    # Does not make sense to calculate the cost of fees for example
    # using an old price for BNB. Maybe it should convert BNB to BUSD as
    # it processes trades based on current price. Yes.
    print("\n", ps)

    months = ["4/2021", "5/2021", "6/2021", "7/2021",
              "8/2021", "9/2021", "10/2021", "11/2021",
              "12/2021", "1/2022", "2/2022"]
    # for month in months:
    #     print(
    #         f"profit in {month}: {ps.profit(month)} BUSD")
    # for month in months:
    #     print(f"Fees for {month}: {ps.fees(month)}")
    for month in months:
        print(f"Net profit for {month}: {ps.profit(month) - ps.fees(month)}")

    print(f"Total profit: {ps.profit()}")
    print(f"Total fees: {ps.fees()}")
    print(f"Total net profit: {ps.profit() - ps.fees()}")

    print("\nTODO:")
    print("Make sure that interest that is taken back after a redemption is accounted for.")
    print("Handle isolated margin in transaction processing")
    print("Invested is not working properly (BETH)")
    print("Check if BUSD distribution works and counts as profit")
    print("Withdrawal fees are not taken into account")
    print("Some initial conversions from EUR to BUSD are not accounted for.. see old code")
    print("I need to see the average price for BUSD")
    print("Add for each coin a figure of it's avg price trajectory along with the invested amount")


if __name__ == "__main__":
    main()

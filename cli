#!/usr/bin/env python3

__author__ = "konstantinos.prasopoulos@epfl.ch (konstantinos prasopoulos)"

'''
Work in progress
'''

import os
import sys
from pprint import pprint

import util
import trade_processor as tradep
import transaction_processor as transp
from cfg import trcols, tdcols
from model import PortfolioState, Position, FlowEvent


def print_monthly_results(res):
    print("\n================= RESULTS =================")
    for res_key in res:
        print(f"\n\n>>>>>>>> {res_key} <<<<<<<<")
        for month in res[res_key]:
            print(f"\n>>>>>> {month}")
            for data_key in res[res_key][month]:
                values = res[res_key][month][data_key]
                if len(values) > 0:
                    print(f">> {data_key}")
                    pprint(values)


def print_info(res):
    print(f"\n~~~~~~~~~~~~~~~ INFO ~~~~~~~~~~~~~~~")
    for res_key in res:
        print(f"\n\n>>>>>>>> {res_key} <<<<<<<<\n")
        for info_key in res[res_key]:
            print(f">> {info_key}")
            print(res[res_key][info_key])


def create_portfolio_state(flow_events):
    ps = PortfolioState()
    for event in flow_events:
        ps.add_trade(event)

    print(ps)

# Profit by month in Portfolio state? Or Use a containgg class/code to extract per month
# stats as the data is fed? Maybe the Position can split profits and fees by month and then
# provide methods to get ether monthly or aggregate views... Makes sense.


def main():
    # TODO: CLI args
    transaction_filepath = "transaction_history_2.csv"
    order_filepath = "order_history.csv"
    trade_filepath = "trade_history_fake.csv"
    do_print_info = True

    flow_events = []
    monthly_results = {}
    results = {}
    info = {}
    trans_fe, monthly_results["Transaction History"], info["Transaction History"] = transp.process_transaction_history(
        transaction_filepath)
    trade_fe, monthly_results["Trade History"], info["Trade History"] = tradep.process_trade_history(
        trade_filepath, info["Transaction History"]["Coins"])

    flow_events += trade_fe
    flow_events += trans_fe
    util.sort_flow_events(flow_events)
    # for ev in flow_events:
    #     print(ev)
    create_portfolio_state(flow_events)

    if do_print_info:
        print_info(info)
    print_monthly_results(monthly_results)


if __name__ == "__main__":
    main()

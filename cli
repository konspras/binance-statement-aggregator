#!/usr/bin/env python3

__author__ = "konstantinos.prasopoulos@epfl.ch (konstantinos prasopoulos)"

'''
Work in progress
'''

import os
import sys
from pprint import pprint

import util
import trade_processor as tradep
import transaction_processor as transp
import eth_staking_processor as ethstp
from cfg import trcols, tdcols
from model import PortfolioState, Position, FlowEvent


def print_info(res):
    print(f"\n~~~~~~~~~~~~~~~ INFO ~~~~~~~~~~~~~~~")
    for res_key in res:
        print(f"\n\n>>>>>>>> {res_key} <<<<<<<<\n")
        for info_key in res[res_key]:
            print(f">> {info_key}")
            print(res[res_key][info_key])


def create_portfolio_state(flow_events):
    ps = PortfolioState()
    for event in flow_events:
        ps.add_event(event)

    return ps

# TODO: Profit by month in Portfolio state? Or Use a containgg class/code to extract per month
# stats as the data is fed? Maybe the Position can split profits and fees by month and then
# provide methods to get ether monthly or aggregate views... Makes sense.


def main():
    # TODO: CLI args
    datapath = "data"
    transaction_filepath = f"{datapath}/transaction_history.csv"
    trade_filepath = f"{datapath}/trade_history.csv"
    eth_stake_path = f"{datapath}/Binance ETH Staking - Stake.csv"
    beth_distr_path = f"{datapath}/Binance ETH Staking - Distribution.csv"
    do_print_info = True

    flow_events = []
    info = {}
    trans_fe, info["Transaction History"] = transp.process_transaction_history(
        transaction_filepath)
    trade_fe, info["Trade History"] = tradep.process_trade_history(
        trade_filepath)
    eth_stake_fe = ethstp.process_eth_staking(eth_stake_path, beth_distr_path)

    flow_events += trade_fe
    flow_events += trans_fe
    flow_events += eth_stake_fe
    util.sort_flow_events(flow_events)
    for ev in flow_events:
        print(ev)
    print("---------------------------------------------------------------------------")
    ps = create_portfolio_state(flow_events)

    if do_print_info:
        print_info(info)

    # TODO: Must there be a price history?
    # Does not make sense to calculate the cost of fees for example
    # using an old price for BNB. Maybe it should convert BNB to BUSD as
    # it processes trades based on current price. Yes.
    print("")
    print(ps)
    print("BETH is not accounted for....")
    print("Handle isolated margin in transaction processing")
    months = ["4/2021", "5/2021", "6/2021"]
    for month in months:
        print(f"profit in {month}: {ps.profit(month)} BUSD (only busd accounted)")
    for month in months:
        print(f"Fees for {month}: {ps.fees(month)}")

    print(ps.mean_price("BNB"))


if __name__ == "__main__":
    main()
